class JubiSquare extends EventDispatcher {
  static get SQUARE_COLOR() { return 'red'; }
  static get CHECKMARK_COLOR() { return 'green'; }
  static get CHECKMARK_LINE_WIDTH() { return 4; }
  static get CHECKMARK_LINE_CAP() { return 'round'; }

  static get CHECKMARK_LEFT() { return [70, 20]; }
  static get CHECKMARK_DOWN() { return [80, 30]; }
  static get CHECKMARK_RIGHT() { return [90, 10]; }

  static get ROLLED_OFF_SIZE() { return 100; }
  static get ROLLED_OVER_SIZE() { return 80; }
  static get GUTTER_SIZE() { return 10; }

  static get ANIMATION_VELOCITY() { return 0.2; }
  static get REMOVE_VELOCITY() { return 0.4; }
  static get KEEP_VELOCITY() { return 0.4; }
  static get CHECKMARK_VELOCITY() { return 0.2; }

  constructor(pen, shouldExist, row, column) {
    super();
    this.pen = pen;
    this.row = row;
    this.column = column;

    var spacing = JubiSquare.ROLLED_OFF_SIZE + JubiSquare.GUTTER_SIZE
    this.leftEdge = JubiSquare.leftOffset + spacing * this.column;
    this.topEdge = JubiSquare.topOffset + spacing * this.row;

    this.shouldExist = Boolean(shouldExist);
    this.kept = this.removed = false;

    this.tweener = new TweenNumber(
      JubiSquare.ROLLED_OFF_SIZE,
      JubiSquare.ANIMATION_VELOCITY,
      this._drawSquare.bind(this)
    );
    this._drawSquare(JubiSquare.ROLLED_OFF_SIZE);
  }

  rolledOff() {
    if (this.kept || this.removed) return;
    this.tweener.tween(JubiSquare.ROLLED_OFF_SIZE);
  }

  rolledOver() {
    if (this.kept || this.removed) return;
    this.tweener.tween(JubiSquare.ROLLED_OVER_SIZE);
  }

  keep() {
    if (!this.shouldExist) {
      throw new Error('Square Should Go');
    }

    if (this.kept) {
      return false;
    } else {
      this.tweener.speed = JubiSquare.KEEP_VELOCITY;
      this.tweener.tween(
        JubiSquare.ROLLED_OFF_SIZE,
        this._drawCheckmarkDown.bind(this)
      );
      this.kept = true;
      return true;
    }
  }

  remove() {
    if (this.shouldExist) {
      throw new Error('Square Exists');
    }

    if (this.removed) {
      return false;
    } else {
      this.tweener.speed = JubiSquare.REMOVE_VELOCITY;
      this.tweener.tween(0);
      this.removed = true;
      return true;
    }
  }

  // PRIVATE
  _clearSquare() {
    this.pen.clearRect(
      this.leftEdge - (JubiSquare.GUTTER_SIZE / 2),
      this.topEdge - (JubiSquare.GUTTER_SIZE / 2),
      JubiSquare.ROLLED_OFF_SIZE + JubiSquare.GUTTER_SIZE,
      JubiSquare.ROLLED_OFF_SIZE + JubiSquare.GUTTER_SIZE
    );
  }

  _drawSquare(edgeSize) {
    this._clearSquare();
    if (edgeSize == 0) return;

    var indent = (JubiSquare.ROLLED_OFF_SIZE - edgeSize) / 2;
    this.pen.fillStyle = JubiSquare.SQUARE_COLOR;
    this.pen.fillRect(
      this.leftEdge + indent,
      this.topEdge + indent,
      edgeSize,
      edgeSize
    );

    this.dispatchEvent(new Event('SquareDrawn'));
  }

  _drawCheckmarkLine(from, to) {
    this.pen.lineCap = JubiSquare.CHECKMARK_LINE_CAP;
    this.pen.lineWidth = JubiSquare.CHECKMARK_LINE_WIDTH;
    this.pen.strokeStyle = JubiSquare.CHECKMARK_COLOR;

    this.pen.beginPath();
    this.pen.moveTo(this.leftEdge + from[0], this.topEdge + from[1]);
    this.pen.lineTo(this.leftEdge + to[0], this.topEdge + to[1]);
    this.pen.stroke();
  }

  _drawCheckmarkDown() {
    var checkTween = new TweenArray(
      JubiSquare.CHECKMARK_LEFT,
      JubiSquare.CHECKMARK_VELOCITY,
      this._downCheckmarkFrame.bind(this),
      this._drawCheckMarkUp.bind(this)
    );
    checkTween.tween(JubiSquare.CHECKMARK_DOWN);
  }

  _downCheckmarkFrame(currentValue) {
    this._drawCheckmarkLine(JubiSquare.CHECKMARK_LEFT, currentValue);
  }

  _drawCheckMarkUp() {
    var checkTween = new TweenArray(
      JubiSquare.CHECKMARK_DOWN,
      JubiSquare.CHECKMARK_VELOCITY,
      this._upCheckmarkFrame.bind(this)
    );
    checkTween.tween(JubiSquare.CHECKMARK_RIGHT);
  }

  _upCheckmarkFrame(currentValue) {
    this._drawCheckmarkLine(JubiSquare.CHECKMARK_DOWN, currentValue);
  }
}
