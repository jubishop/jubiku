class TweenArray {
  constructor(startValue, amountPerMS, callback, finishCallback = false) {
    if (startValue.constructor != Array) {
      throw new TypeError('startValue must be an Array.');
    }

    this.currentValue = startValue;
    this.amountPerMS = amountPerMS;
    this.callback = callback;
    this.finishCallback = finishCallback;
  }

  set speed(amountPerMS) {
    this.amountPerMS = amountPerMS;
  }

  stopTweening() {
    if (this.animationID) {
      window.cancelAnimationFrame(this.animationID);
      this.animationID = false;
    }
  }

  tween(toValue, finishCallback = false) {
    if (toValue.constructor != Array ||
      toValue.length != this.currentValue.length) {
      throw new TypeError('toValue does not match startValue');
    }

    if (finishCallback) {
      this.finishCallback = finishCallback;
    }

    this.stopTweening();

    this.toValue = toValue;

    var valueSpread = this.currentValue.map((item, index) => {
      return Math.abs(item - toValue[index])
    });
    var maxSpread = Math.max(...valueSpread);
    this.speedRatios = valueSpread.map((item) => { return item / maxSpread; });

    this.currentMS = window.performance.now();
    this.animationID = window.requestAnimationFrame(this._frame.bind(this));
  }

  // PRIVATE
  _informCallback(value) {
    this.callback(value);
  }

  _frame(timeStamp) {
    var time_diff = timeStamp - this.currentMS;

    this.currentValue = this.toValue.map((toValue, index) => {
      var currentValue = this.currentValue[index];
      var speedRatio = this.speedRatios[index];
      return (toValue > currentValue) ?
        Math.min(
          toValue,
          time_diff * this.amountPerMS * speedRatio + currentValue
        ) :
        Math.max(
          toValue,
          currentValue - time_diff * this.amountPerMS * speedRatio
        );
    });

    var finished = this.currentValue.toString() == this.toValue.toString();
    if (finished) {
      this.stopTweening();
    } else {
      this.currentMS = timeStamp;
      this.animationID = window.requestAnimationFrame(this._frame.bind(this));
    }

    this._informCallback(this.currentValue);

    if (this.finishCallback && finished) {
      this.finishCallback();
    }
  }
}