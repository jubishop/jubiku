class JubiHint {
  static get HINT_HEIGHT() { return 50; }
  static get HINT_WIDTH() { return 50; }

  static get FONT_SIZE() { return 30; }
  static get HINT_SPACING() { return 10; }

  constructor(pen, hint, pos) {
    if (this.constructor == JubiHint) {
      throw new TypeError("JubiArrow is an abstract class");
    }

    this.pen = pen;
    if (hint) {
      this.multipleHints = (hint.constructor == Array);
      this.hints = this.multipleHints ?
        hint.map(h => h.toString()) :
        ['[' + hint.toString() + ']'];
    } else {
      this.hints = false;
    }

    console.log(this.hints);
    this.pos = pos;

    this.pen.font = JubiHint.FONT_SIZE + 'px Arial';

    this.drawUnsolved();
  }

  drawUnsolved() {
    throw new TypeError("drawUnsolved is a virtual function");
  }
}

class JubiRowHint extends JubiHint {
  drawUnsolved() {
    if (this.hints) {
      this.pen.textBaseline = 'middle';
      this.pen.textAlign = 'right';

      var xPos = JubiHint.HINT_WIDTH;
      for (var i = this.hints.length - 1; i >= 0; i--) {
        var hint = this.hints[i];
        this.pen.fillText(
          hint,
          xPos,
          this.pos
        );
        xPos -= this.pen.measureText(hint).width + JubiHint.HINT_SPACING;
      }
    }
  }
}

class JubiColumnHint extends JubiHint {
  drawUnsolved() {
    if (this.hints) {
      this.pen.textBaseline = 'bottom';
      this.pen.textAlign = 'center';

      var yPos = JubiHint.HINT_HEIGHT;
      for (var i = this.hints.length - 1; i >= 0; i--) {
        var hint = this.hints[i];
        this.pen.fillText(
          hint,
          this.pos,
          yPos
        );
        yPos -= JubiHint.FONT_SIZE + JubiHint.HINT_SPACING;
      }
    }
  }  
}