class Jubiku {
  static get ARROW_MARGIN() { return 5; }
  static get HINT_MARGIN() { return 10; }

  constructor(canvas, squares, rowHints, columnHints, internalNumbers) {
    this.canvas = canvas;
    this.pen = this.canvas.getContext('2d');

    // Set Static Vars
    JubiSquare.leftOffset = JubiHint.HINT_WIDTH + Jubiku.HINT_MARGIN +
      JubiArrow.ARROW_HEIGHT + Jubiku.ARROW_MARGIN;
    JubiSquare.topOffset = JubiHint.HINT_HEIGHT + Jubiku.HINT_MARGIN +
      JubiArrow.ARROW_HEIGHT + Jubiku.ARROW_MARGIN;

    // Create arrows
    this.jubiColumnArrow = new JubiColumnArrow(
      this.pen,
      JubiHint.HINT_HEIGHT + Jubiku.HINT_MARGIN
    );
    this.jubiRowArrow = new JubiRowArrow(
      this.pen,
      JubiHint.HINT_WIDTH + Jubiku.HINT_MARGIN
    );

    // Create squares
    this.jubiSquares = squares.map((rowElement, row) => {
      return rowElement.map((columnValue, column) => {
        return new JubiSquare(this.pen, columnValue, row, column);
      });
    });

    // Create hints
    var spacing = JubiSquare.ROLLED_OFF_SIZE + JubiSquare.GUTTER_SIZE;
    var half_square = JubiSquare.ROLLED_OFF_SIZE / 2;
    this.rowHints = rowHints.map((rowHint, row) => {
      return new JubiRowHint(
        this.pen,
        rowHint,
        JubiSquare.topOffset + spacing * row + half_square,
        this.jubiSquares[row]
      );
    });
    this.columnHints = columnHints.map((columnHint, column) => {
      return new JubiColumnHint(
        this.pen,
        columnHint,
        JubiSquare.leftOffset + spacing * column + half_square,
        this.jubiSquares.map((squareRow) => { return squareRow[column] })
      );
    });
    this.internalNumberHints = internalNumbers.map((internalNumber) => {
      return new JubiNumberHint(this.pen, internalNumber, this.jubiSquares);
    });

    // Listen to the mouse
    this.canvas.addEventListener('mouseenter', this.mouseMove.bind(this));
    this.canvas.addEventListener('mouseleave', this.mouseLeave.bind(this));
    this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));
    this.canvas.addEventListener('click', this.click.bind(this));
    this.canvas.addEventListener('contextmenu', this.rightClick.bind(this));
  }

  mouseLeave(event) {
    this.jubiColumnArrow.clearArrow();
    this.jubiRowArrow.clearArrow();

    if (this.currentSquare) {
      this.currentSquare.rolledOff();
    }
    this.currentSquare = false;
  }

  mouseMove(event) {
    var new_square = this.getSquareUnderMouse(event);
    if (new_square != this.currentSquare) {
      if (this.currentSquare && (!new_square ||
        new_square.column != this.currentSquare.column)) {
        this.jubiColumnArrow.clearArrow();
      }
      if (new_square && (!this.currentSquare ||
        new_square.column != this.currentSquare.column)) {
        this.jubiColumnArrow.drawArrow(
          new_square.leftEdge + JubiSquare.ROLLED_OFF_SIZE / 2
        );
      }

      if (this.currentSquare && (!new_square ||
        new_square.row != this.currentSquare.row)) {
        this.jubiRowArrow.clearArrow();
      }
      if (new_square && (!this.currentSquare ||
        new_square.row != this.currentSquare.row)) {
        this.jubiRowArrow.drawArrow(
          new_square.topEdge + JubiSquare.ROLLED_OFF_SIZE / 2
        );
      }

      if (this.currentSquare) {
        this.currentSquare.rolledOff();
      }
      this.currentSquare = new_square;
      if (this.currentSquare) {
        this.currentSquare.rolledOver();
      }
    }
  }

  click(event) {
    var clicked_square = this.getSquareUnderMouse(event);
    if (clicked_square) {
      try {
        var removed = clicked_square.remove();
      }
      catch (error) {
        removed = false;
        console.log("That square stays");
      }

      if (removed) {
        console.log("Square removed!");
      }
    }
  }

  rightClick(event) {
    var right_clicked_square = this.getSquareUnderMouse(event);
    if (right_clicked_square) {
      try {
        var kept = right_clicked_square.keep();
      }
      catch (error) {
        kept = false;
        console.log("That square should go");
      }

      if (kept) {
        console.log("Square kept!");
      }
    }

    event.preventDefault();
    return false;
  }

  getSquareUnderMouse(event) {
    var bounding_rect = this.canvas.getBoundingClientRect();
    var mouse_x = event.clientX - bounding_rect.left - JubiSquare.leftOffset;
    var mouse_y = event.clientY - bounding_rect.top - JubiSquare.topOffset;

    if (mouse_x < 0 || mouse_y < 0) {
      return false; // over left or top of board
    }

    var square_plus_gutter = JubiSquare.ROLLED_OFF_SIZE +
       JubiSquare.GUTTER_SIZE;
    var column = Math.floor(mouse_y / square_plus_gutter);
    var row = Math.floor(mouse_x / square_plus_gutter);

    if (column >= this.jubiSquares.length ||
      row >= this.jubiSquares[0].length) {
      return false; // over right or bottom of board
    }

    return (mouse_x % square_plus_gutter > JubiSquare.ROLLED_OFF_SIZE ||
      mouse_y % square_plus_gutter > JubiSquare.ROLLED_OFF_SIZE) ?
      false : // in gutter
      this.jubiSquares[column][row];
  }
}