class Jubiku {
  static get ARROW_MARGIN() { return 5; }

  constructor(canvas, squares, rowHints, columnHints, internalNumbers) {
    this.canvas = canvas;
    this.pen = this.canvas.getContext('2d');

    JubiSquare.leftOffset = JubiArrow.ARROW_HEIGHT + Jubiku.ARROW_MARGIN;
    JubiSquare.topOffset = JubiArrow.ARROW_HEIGHT + Jubiku.ARROW_MARGIN;

    this.jubiSquares = squares.map((rowElement, row) => {
      return rowElement.map((columnValue, column) => {
        return new JubiSquare(this.pen, columnValue, row, column);
      });
    });

    this.jubiColumnArrow = new JubiColumnArrow(this.pen);
    this.jubiRowArrow = new JubiRowArrow(this.pen);

    this.canvas.addEventListener('mouseenter', this.mouseMove.bind(this));
    this.canvas.addEventListener('mouseleave', this.mouseLeave.bind(this));
    this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));
  }

  mouseLeave(event) {
    this.jubiColumnArrow.clearArrow();
    this.jubiRowArrow.clearArrow();

    if (this.currentSquare) {
      this.currentSquare.rolledOff();
    }
    this.currentSquare = false;
  }

  mouseMove(event) {
    var new_square = this.getSquareUnderMouse(event);
    if (new_square != this.currentSquare) {
      if (this.currentSquare && (!new_square || 
        new_square.column != this.currentSquare.column)) {
        this.jubiColumnArrow.clearArrow();
      }
      if (new_square && (!this.currentSquare ||
        new_square.column != this.currentSquare.column)) {
        this.jubiColumnArrow.drawArrow(
          new_square.leftEdge + JubiSquare.ROLLED_OFF_SIZE / 2
        );
      }

      if (this.currentSquare && (!new_square || 
        new_square.row != this.currentSquare.row)) {
        this.jubiRowArrow.clearArrow();
      }
      if (new_square && (!this.currentSquare ||
        new_square.row != this.currentSquare.row)) {
        this.jubiRowArrow.drawArrow(
          new_square.topEdge + JubiSquare.ROLLED_OFF_SIZE / 2
        );
      }

      if (this.currentSquare) {
        this.currentSquare.rolledOff();
      }
      this.currentSquare = new_square;
      if (this.currentSquare) {
        this.currentSquare.rolledOver();
      }
    }
  }

  getSquareUnderMouse(event) {
    var bounding_rect = this.canvas.getBoundingClientRect();
    var mouse_x = event.clientX - bounding_rect.left - JubiSquare.leftOffset;
    var mouse_y = event.clientY - bounding_rect.top - JubiSquare.topOffset;

    if (mouse_x < 0 || mouse_y < 0) {
      return false; // over left or top of board
    }

    var square_plus_gutter = JubiSquare.ROLLED_OFF_SIZE +
       JubiSquare.GUTTER_SIZE;
    var column = Math.floor(mouse_y / square_plus_gutter);
    var row = Math.floor(mouse_x / square_plus_gutter);

    if (column >= this.jubiSquares.length ||
      row >= this.jubiSquares[0].length) {
      return false; // over right or bottom of board
    }

    return (mouse_x % square_plus_gutter > JubiSquare.ROLLED_OFF_SIZE ||
      mouse_y % square_plus_gutter > JubiSquare.ROLLED_OFF_SIZE) ?
      false : // in gutter
      this.jubiSquares[column][row];
  }
}